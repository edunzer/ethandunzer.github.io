Chapter 0
Who wrote “software is hard?” Who is that guy?
	-Donald Knuth, he was an author of the most popular and respected programming textbooks
Programmers start counting at what number?
	-0
What was the original sense of a “hacker?”
	-obsessive programming tinkerer
According to a 2002 NIST study what % of software came in significantly late, over budget, or was canceled?
	-2 out of 3
Who wrote the 1987 essay entitled “No Silver Bullet?”
	-Fredrick P. Brooks, Jr.

Chapter 1
What roles in the Chandler project did Michael Toy, John Anderson, Ted Burgess, Mitchell Kapor, and Lou Montulli hold.
	-They were all major contributors of the project. 
What is “Bugzilla?”
	-the active list of bugs that was currently in the program
What is OSAF?
	-open source application foundation
What is the projects name?
	-chandler
What will the software do?
	-a social networking planner
What is Toy’s keyword for “black hole” bugs?
	-These are the bugs that can take forever, there is no time frame for them to be finished
What scared Toy so much about Bug 44?
	-That they didnt know how long it would take to fix
What did Toy refer to as a “snake?”
	-
In the software world, what does “slippage” mean?
	-when a group/project is going away from there schedule. 
Fredrick Brooks was a programming manager for what software project?
	-Lotus 123
What is Brooks's Law?
	-it exsplains why adding people to a project makes the project completeion time longer. 
Brooks found what % of project time was spent writing code?
	-
Brooks found what % of project time was for testing and fixing bugs?
	-
Brooks observed that the unit of effort named “man-month” only applied under what conditions?
	-when all the programmers where working together, and they had to continue to add more programmers to the group. 
What is the difference between source code and the program you install (.exe) on your computer?
	-source code alows you to see and alter what the code does, programs have complressed and locked code that you can not read or alter.
What is the one “article of faith” that all “open source” or “free” software advocates share?
	-that open source apps haave a better chance of becoming something great becuase they have so many minds working on the project. 
What is the difference between a “good” programmer and a “great” programmer?
	-good ones can write ccode that works but great ones can write it in way that everyone understands and knows. 
Eric Raymond’s book “The Cathedral and the Bazaar” made a distinction between two important project development ideas, briefly contrast them.
	-	
Has “open source” software project development refuted Brooks’s “mythical man-month” concerns?
	-i think it does in the sence that having alot of new people on a project slows it down. but you can agrue that not everyone is working together in a open source project.
What was Andy Hertzfeld’s input when the Chandler project appeared to have stalled?
	-
   
Chapter 2
What was the lifetime as a supported product, of Lotus 123? When did Kapor walk away from it? Why did he walk away from it?
	-kapor left lotus in july 1986, saying "extricating myself from my own success
What does it mean for a program to “fork?”
	-to respond to technical disagreements by splitting into rival camps
Linus Torvalds used a “science” and “witchcraft” analogy referring to software, explain.
	-In witchcraft, somebody had a small secret and guarded it—but never allowed others to really understand it and build on it.Traditional software is like witchcraft. 
Who, where, when demonstrated one of the first PIM software programs?
	- 
People often refer to starting their computer as “booting” their computer. What was the origin of this term?
	-The builders of early computer systems had borrowed the term from the concept of pulling one's self up by thebootstraps to describe the paradox of getting a computer up and running.
Where was the graphical user interface (GUI) developed?
	-Xerox's Palo Alto Research Center
List three software project “train wrecks.”
	-Advanced Automation System
What software crisis? Scan this article, what does it suggest? 
	-that despite everyone saying that projects are becoming harder and harder to finish its not a big deal. nothing major is going to happen because people give up to save money. 
Scan down this article to the two conclusions (about eight paragraphs down). With two sentences, what is your take away from this?
	http://scribblethink.org/Work/Softestim/softestim.html

Chapter 3
Keep track of team members: 2001 --> Mitch Kapor, Morgen Sagen, Al Cho, Andy Hertzfeld
	-
When introducing a new technology or design, why did Frederick Brooks advise “plan to throw one away?”
	-becuase you almost certainly wont get it right the first time. 
2002, Katie Parlante joined Chandler. When she first joined what did she do?
	-she researched user behavior patterns
John Anderson joined Chandler as “systems architect.” Briefly, what did that mean?
	-title meant that he held chief responsibility for choosing the building blocks that the programmers would use to create their software
What is a “core” dump? Why the use of the word core? 
	-the computer drops everything, grinds to a halt, and spits out a file reporting the exact contents of its memory at the moment of failure, offering bug hunters a heap of clues to dig through. were built out of wound wire coils known as ferrite cores.
How did Erik Sink, speaking of abstractions, describe what programmers do?
	-"We build piles of abstractions. We design our own abstractions and then pile them up on top of layers we got from somebody else." And every year the piles grow higher. 
Rather than writing program statements in binary code, 110101110  1001101111, programmers developed a shorthand language called what?
	-over the wire
Adding layers of abstraction, new programming languages were created: Lisp, Cobol, Algol, Basic. Fortran was the first widely used. What kind of program converted Fortran to binary?
	-interpreter
What are the implications behind: “...there is no Moore’s Law for software. Chips may double in capacity every year or two; our brains don’t.”?
	-the idea is that at some point humans will no longer be able to understand the complexity of a chip, computer will have to be used to build other computers. 
The language selected for Chandler was Python. What does it mean that Python was an interpreted language?
	- interpreted languages perform that translation when you run the program
The announcement of Chandler occurred when? (Interesting Paper) Slashdot page from 2002.
	-2003

Chapter 4
More programmers join the Chandler team...
Lou Montulli, Aleks Totic (volunteers): experience with internet protocols (Netscape)
Chi-Chao Lam: Product Manager
Pieter Hartsook: OSAF’s marketing and PR
Jed Burgess: GUI, David McCusker: data storage
Michael Toy: Programming team manager
Andi Vajda: OSAF’s repository developer
Brian Skinner (volunteer)
What do “front ends” and “back ends” mean to software developers?
	-You, the user, are in front, and the front end is the part of the program that deals with you—that offers windows and dialogues and mouse pointers, tells you what's happening, and provides ways for you to input and output information. The back end is where the results of front-end events and inputs go so that the computer can make sense of them, save them, and retrieve them. 
The terms RAP, SQL, object persistence, all relate to a problem Chandler’s developers needed to solve at the earliest stage. What was the problem?
What did the Lego Hypothesis refer to?
	-"In the future, programs will be built out of reusable parts. Software parts will be available worldwide. Software engineering will be set 
free from the mundane necessity of programming." 
Give one reason why the Lego Hypothesis seems to not work so well.
	-well considereing that we are there in many ways already, it think its obvious that something new is going to come up and you have to make something new. 
How many “modules” does CPAN currently host?
	-8107
After Chandler was announced in Oct. 2002, when was the first public release?
	-April 21, 2003, at 3:07 P.M. 

Chapter 5
What is the three-way trade-off that many software projects struggle to overcome.
	-you program can be 2 out of 3, fast cheap good, fast cheap, fast good, cheap good
Michael Toy: Software development manager, does what?
	-programming team manager
What is the more recent definition of “geek?”
	-"Geek: A person who has chosen concentration rather than conformity; one who pursues skill (especiallytechnical skill) and imagination, not mainstream social acceptance." 
Kaitlin “Ducky” Sherwood: Help with Chandler’s approach to email, organize project documentation. Important?
	-yes very
What does “refactoring” mean to programmers?
-means rewriting a chink of code to make it breifer, clearer, and easier to read without changing the core functionality
“In software management, coordination is not an afterthought or an ancillary matter; is the....” Finish the sentence.
	-it is the heart of the work, and deciding what tools and methods to use can make or break a project. 
What is “yak-shaving?”
	-seemingly pointless activity which is actually necessar to solve a problem which solves a problem which, serveral levels of recursion later, solves the real problem you're working on. 

Chapter 6
What is term “edge cases” referring to in software development?
	-sooner or later someone will end up making every possible unlikely choice that the software allows.
What did M. Kapor argue that software design was? (One sentence.)
	-its not simply a matter of hanging attractive graphics atop the programmers' code. It was the fundamental creative act of imagining the user's needs and devising structures in software to fulfill those needs.
Montulli and Totic leave the project
Heikki Toivonen, Stuart Parmenter, and Mimi Yin are hired to do what?
	-chandlers security
Andy Hertzfeld leaves
Michael Toy leaves
Mitch Kapor takes over overall management of development
Summarize briefly Linus Torvalds advice about “large projects” give in 2004
	-there are always going to be failures and problems that take to long, the best thing to do is not get bogged down and think you will never finsih what you started. 

Chapter 7
Ted Leung hired to do what?
	-test the how chandler could handle large amounts of data
Donn Denman hired (2004) to do what?
	-create the detail view
Briefly describe Hungarian notation
	-In Hungarian notation, the programmer appends a prefix to every variable name that gives anyone reading the code important clues about what sort of variable it is.
What does the author state is the “...single most challenging demand of software development.”
	-Communicating abstractions unambiguously—from programmer to machine, from programmer to programmer, and from program to user
Brian Kirsch, David Surovell, and Lisa Dusseault joined the effort in what roles?
	-writing email code, improving widgets on the mac side of chandler, managing the crew of programmers
Katie Parlante assumes mantle as “architecture coordinator”, what is this?
	-she would make all the big change descions
Lisa Dusseault takes on “detailed planning and scheduling of the development work.” Any idea what this is?
	-she would organize how projects would be completed and started

Chapter 8
What does “eat your own dogfood” mean?
	-the phrase means that software developers must themselves use the products they are in the process of building. 
What happened to the “peer-to-peer” sharing ideal in Chandler? (This is related to the WebDAV discussion.) 
	-the solution to there problem was never solved and they concluded it was a dead end
Quote: “When people ask for numbers that far out, the traditional thing that engineers do ....” When discussing the timeline for Chandler, how was the quote above completed?
	-"is make them up"
Aparna Kadakia became quality assurance (QA) manager. Sheila Mooney joins Chao Lam on product management writing more formal and detailed specifications.
As “reality” set in, what happened to Chandlers goals?
	-they realised that they could not keep up with the demand of ideas into code, they were working from bottom up, instead of top down. 
Brian Skinner leaves, Stuart Parmenter leaves, Chao Lam leaves, and Ducky Sherwood leaves.

Chapter 9
After about two years with little to show for it, the author suggests the project had something else important. What?
	-a long history of what not to do
Structured programming evolved to address what programming practice?
	-the central idea was to compose a program as a collection of subunits, each of which had only a single point of entry and a single point of exit.
Was structured programming a solution to the problem of software development?
	-it wasnt a solution more a patch to make things more efficent.
Have any techniques shown to improve the software development process?
	-
Give a few software failures the author lists. Did anyone die due to the errors?
	-
The “waterfall model” of programming was/is popular. What were some problems with this model?
	-divided a project into an orderly sequence of discrete phases, like requirements definition, design, implementation, integration, testing, and deployment. One phase would finish before the next began.
What are the four tenets of Agile Software Development?
	-individuals and interactions, working software, customer collaboration, responding to change
What did a 2004 study find about the development practices of some two hundred software team leaders?
	-The study's authors wrote of "the shock and disappointment we felt at finding that the most dominant practice was none at all—a practice (if it can be called such) reported by a full third of the survey participants." 
What is the “Joel Test” and what did he say about Microsoft and the Joel Test.
	-it was a test to see how well your project functioned, "I think Microsoft is now well in the advanced throes of getting everything 100 percent right in terms of the discipline and just no longer producing products people want to buy with any level of consistency,"
What is Rosenberg’s Law?
	-Software is easy to make, except when you want it to do something new. And then, of course, there is a corollary: The only software that's worth making is software that does something new

Chapter 10
Chapter 10 is about the notion of “Software Engineering” and the difficulty of applying this label to the development of software. The author suggests that Yertle the Turtle provides an important lesson for programmers. Describe it.
	- in which a turtle king climbs atop a turtle tower so he can survey the vast extent of his kingdom. Finally, the lowliest turtle in the stack burps, and down comes the king, along with the rest of the turtles in the pile. The moral of Yertle is—well, there are plenty of morals. For a programmer the lesson might be that stacks of turtles, or layers of abstractions, don't respond well to the failure of even one small part. They are, to use a word that is very popular among the software world's malcontents, brittle. When stressed, they don't bend, they break. 
